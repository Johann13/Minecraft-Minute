---
interface Props {
  clipId: string
}

const {clipId} = Astro.props

---

<div class="minecraft-checkbox-container">
  <input
    type="checkbox"
    id={`watched-clip-${clipId}`}
    class="minecraft-checkbox"
    data-clip-id={clipId}
  />
  <label
    for={`watched-clip-${clipId}`}
    class="minecraft-checkbox-label button px-1 py-0.5 text-center font-minecraft flex items-center gap-0.5 text-xs"
  >
    <span class="checkbox-icon"></span>
    <span class="checkbox-text">Watched</span>
  </label>
</div>

<script>
  // Initialize all checkboxes when the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const checkboxes = document.querySelectorAll('.minecraft-checkbox');

    // Initialize each checkbox
    checkboxes.forEach(checkbox => {
      const clipId = checkbox.getAttribute('data-clip-id');
      if (!clipId) return;

      // Get watched clips from localStorage
      const watchedClips = JSON.parse(localStorage.getItem('minecraft-minute-watched-clips') || '[]');

      // Set initial state based on localStorage
      checkbox.checked = watchedClips.includes(clipId);

      // Add event listener for checkbox changes
      checkbox.addEventListener('change', (e) => {
        const target = e.target as HTMLInputElement;
        const clipId = target.getAttribute('data-clip-id');
        if (!clipId) return;

        // Get current watched clips
        const watchedClips = JSON.parse(localStorage.getItem('minecraft-minute-watched-clips') || '[]');

        if (target.checked) {
          // Add clip to watched list if not already there
          if (!watchedClips.includes(clipId)) {
            watchedClips.push(clipId);
          }
        } else {
          // Remove clip from watched list
          const index = watchedClips.indexOf(clipId);
          if (index > -1) {
            watchedClips.splice(index, 1);
          }
        }

        // Save updated watched clips to localStorage
        localStorage.setItem('minecraft-minute-watched-clips', JSON.stringify(watchedClips));
      });
    });
  });
</script>

<style>
  /* Minecraft-style checkbox styling */
  .minecraft-checkbox-container {
    position: relative;
    display: inline-block;
  }

  .minecraft-checkbox {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;
  }

  .minecraft-checkbox-label {
    cursor: pointer;
    user-select: none;
    border: 2px solid #555;
    background-color: #8B8B8B;
    color: #FFFFFF;
    text-shadow: 2px 2px #000000;
    transition: all 0.2s;
  }

  .minecraft-checkbox-label:hover {
    background-color: #A0A0A0;
  }

  .checkbox-icon {
    display: inline-block;
    width: 12px;
    height: 12px;
    background-color: #555;
    border: 1px solid #000;
    position: relative;
  }

  .minecraft-checkbox:checked + .minecraft-checkbox-label .checkbox-icon::after {
    content: "";
    position: absolute;
    top: 1px;
    left: 1px;
    width: 10px;
    height: 10px;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='10' height='10' fill='none' stroke='%2300FF00' stroke-width='4' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='20 6 9 17 4 12'%3E%3C/polyline%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
  }

  .minecraft-checkbox:checked + .minecraft-checkbox-label {
    background-color: #55ff55; /* Minecraft green */
  }
</style>
