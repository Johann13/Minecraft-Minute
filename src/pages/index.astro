---
import {actions} from "astro:actions";
import Layout from '../layouts/Layout.astro';
import AddClipForm from "../components/AddClipForm";
import LoginSection from "../components/LoginSection.astro";
import ExplainerSection from "../components/ExplainerSection";
import ClipGridTile from "../components/ClipGridTile.astro";
import ClipListTile from "../components/ClipListTile.astro";
import ClipGridTileEmbed from "../components/ClipGridTileEmbed.astro";

const {user} = Astro.locals

const order = Astro.url.searchParams.get('order') ?? 'newestfirst'
const {data: clips, error} = await Astro.callAction(actions.getClips, order)

const embedStr = Astro.url.searchParams.get('embed') ?? 'false'

const embed = embedStr === 'true'
---

<Layout>
    <div class="max-w-[1200px] mx-auto p-8 flex flex-col gap-6">
      {user && (
              <AddClipForm client:only="solid-js"/>)}

      {error && (
              <div class="bg-red-500 text-white p-4 rounded-md shadow-md">
                  <p class="font-bold">Error:</p>
                  <p>{error.message || JSON.stringify(error)}</p>
              </div>
      )}

        <ExplainerSection client:only="solid-js"/>

      {clips && (
              <div class="flex gap-4 mb-4 justify-center">
                  <a href={`/?order=newestfirst${embed ? '&embed=true' : ''}`}
                     class:list={[
                       {'underline': order === 'newestfirst'},
                       'button px-3 py-2 text-center font-minecraft',
                     ]}>
                      Newest First
                  </a>
                  <a href={`/?order=oldestfirst${embed ? '&embed=true' : ''}`}
                     class:list={[
                       {'underline': order === 'oldestfirst'},
                       'button px-3 py-2 text-center font-minecraft',
                     ]}>
                      Oldest First
                  </a>
                {
                  user && (
                                <a href="/api/auth/logout" class:list={[
                                  'button px-3 py-2 text-center font-minecraft',
                                ]}>Logout</a>
                  )
                }
              </div>

              <div id="clips-container">
                  <!-- Grid view will be shown when layout setting is "grid" -->
                {!embed &&
                        <div id="grid-view" class="grid grid-cols-1 md:grid-cols-2 gap-4" style="display: none;">
                          {clips.map(clip => (
                                  <ClipGridTile clip={clip} embed={embed}/>
                          ))}
                        </div>}
                {embed &&
                        <div id="grid-view" class="grid grid-cols-1 sm:grid-cols-2 gap-2">
                          {clips.map(clip => (
                                  <ClipGridTileEmbed clip={clip}/>
                          ))}
                        </div>}

                  <!-- List view will be shown when layout setting is "list" -->
                  <div id="list-view" class="flex flex-col gap-4" style="display: none;">
                    {clips.map(clip => (
                            <ClipListTile clip={clip} embed={embed}/>
                    ))}
                  </div>
              </div>

      )}

        <script>
          // Function to apply layout setting from localStorage
          function applyLayoutSetting() {
            // Get layout setting from localStorage, default to "list" if not set
            const settings = JSON.parse(localStorage.getItem('minecraft-minute-settings') || '{"layout": "list"}');
            const layoutValue = settings.layout || 'list';

            // Get the view elements
            const gridView = document.getElementById('grid-view');
            const listView = document.getElementById('list-view');

            // Show the appropriate view based on the layout setting
            if (layoutValue === 'grid') {
              gridView.style.display = 'grid';
              listView.style.display = 'none';
            } else {
              gridView.style.display = 'none';
              listView.style.display = 'flex';
            }
          }

          // Apply layout setting when the page loads
          document.addEventListener('DOMContentLoaded', applyLayoutSetting);
        </script>

        <script>
          // Function to initialize lazy loading for embeds
          function initLazyEmbeds() {
            // Select all lazy embed containers
            const lazyEmbedContainers = document.querySelectorAll('.lazy-embed-container');

            // If IntersectionObserver is supported
            if ('IntersectionObserver' in window) {
              // Create a new IntersectionObserver
              const embedObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                  // If the element is in view
                  if (entry.isIntersecting) {
                    const container = entry.target;
                    const shouldEmbed = container.dataset.shouldEmbed === 'true';

                    // Only load embed if it should be embedded
                    if (shouldEmbed) {
                      // Get embed information from data attributes
                      const embedUrl = container.dataset.embedUrl;
                      const clipTitle = container.dataset.clipTitle;

                      // Create iframe element
                      const iframe = document.createElement('iframe');
                      iframe.src = embedUrl;
                      iframe.frameBorder = '0';
                      iframe.allowFullscreen = true;
                      iframe.scrolling = 'no';
                      iframe.allow = 'autoplay; fullscreen';
                      iframe.className = 'w-full h-full absolute top-0 left-0';
                      iframe.title = clipTitle;

                      // Remove the placeholder
                      const placeholder = container.querySelector('.lazy-embed-placeholder');
                      if (placeholder) {
                        placeholder.remove();
                      }

                      // Hide the thumbnail
                      const thumbnail = container.querySelector('.lazy-embed-thumbnail');
                      if (thumbnail) {
                        thumbnail.style.display = 'none';
                      }

                      // Add the iframe to the container
                      container.appendChild(iframe);

                      // Stop observing this element
                      observer.unobserve(container);
                    }
                  }
                });
              }, {
                // Options for the observer
                rootMargin: '100px', // Load embeds when they're 100px from entering the viewport
                threshold: 0.1 // Trigger when at least 10% of the element is visible
              });

              // Start observing each container
              lazyEmbedContainers.forEach(container => {
                embedObserver.observe(container);
              });
            } else {
              // Fallback for browsers that don't support IntersectionObserver
              // Just load all embeds immediately
              lazyEmbedContainers.forEach(container => {
                const shouldEmbed = container.dataset.shouldEmbed === 'true';
                if (shouldEmbed) {
                  const embedUrl = container.dataset.embedUrl;
                  const clipTitle = container.dataset.clipTitle;

                  const iframe = document.createElement('iframe');
                  iframe.src = embedUrl;
                  iframe.frameBorder = '0';
                  iframe.allowFullscreen = true;
                  iframe.scrolling = 'no';
                  iframe.allow = 'autoplay; fullscreen';
                  iframe.className = 'w-full h-full absolute top-0 left-0';
                  iframe.title = clipTitle;

                  const placeholder = container.querySelector('.lazy-embed-placeholder');
                  if (placeholder) {
                    placeholder.remove();
                  }

                  const thumbnail = container.querySelector('.lazy-embed-thumbnail');
                  if (thumbnail) {
                    thumbnail.style.display = 'none';
                  }

                  container.appendChild(iframe);
                }
              });
            }
          }

          // Initialize lazy loading when the DOM is fully loaded
          document.addEventListener('DOMContentLoaded', initLazyEmbeds);
        </script>

      {!user && (
              <LoginSection/>)}
    </div>
</Layout>
